# The sequence of triangle numbers is generated by adding the natural numbers. 
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
# The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?

from timeit import default_timer
from math import ceil
from functools import reduce
start = default_timer()

def factors(n):
    step = 2 if n % 2 else 1
    return set(reduce(list.__add__,
        ([i, n//i] for i in range(1, ceil(n**0.5)+1,step) if n % i == 0)))

def triangle_numbers(divisors):
    num_list = [1]
    i=2
    while len(factors(num_list[-1])) < divisors:
        num_list.append(num_list[-1]+i)
        i += 1
    return num_list[-1]

print(triangle_numbers(500))

stop = default_timer()
print(f"Time elapsed: {stop-start} seconds")